version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-env:
    description: this will destroy the backend when there the smoke test fails
    steps:
      - run:
          name: destroy backend
          command: |
            aws cloudformation delete-stack \
            -- stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
      - run:
          name: destroy frontend
          command: |
            aws cloudformation delete-stack \
            -- stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail

  restore-frontend-cache:
    description: For cache modularity
    steps:
      - restore_cache:
          keys:
            - frontend-modules
  restore-backend-cache:
    description: For cache modularity
    steps:
      - restore_cache:
          keys:
            - backend-modules


  build:
    description: For build command modularity
    steps:
      - run:
          name: Build frontend and backend
          command: |
            cd frontend
            npm install
            npm run build
  test:
    description: For test command modularity
    steps:
      - run:
          name: Test frontend and backend
          command: |
            cd frontend
            npm install
            npm run test
  scan:
    description: For scan command modularity
    steps:
      - run:
          name: scan frontend and backend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

executors:
  aws-exec-env:
    docker:
      - image: amazon/aws-cli
  node-exec-env:
    docker:
      - image: circleci/node:13.8.0
  ansible-exec-env:
    docker:
      - image: python:3.7-alpine3.11

jobs:
  build-frontend:
    executor: node-exec-env
    steps:
      - checkout
      - build
      - save_cache:
          paths: 
            - frontend/node_modules
          key: frontend-modules
  test-frontend:
    executor: node-exec-env
    steps:
      - checkout
      - restore-frontend-cache
      - test
  scan-frontend:
    executor: node-exec-env
    steps:
      - checkout
      - restore-frontend-cache
      - scan
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    executor: node-exec-env
    steps:
      - checkout
      - build
      - save_cache:
          paths: 
            - backend/node_modules
          key: backend-modules
  test-backend:
    executor: node-exec-env
    steps:
      - checkout
      - restore-backend-cache
      - test
  scan-backend:
    executor: node-exec-env
    steps:
      - checkout
      - restore-backend-cache
      - scan

  deploy-infrastructure:
    executor: aws-exec-env
    steps:
      - checkout
      - run: yum install tar gzip -y
      - run:
          name: Ensure backend exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople    
      - run:
          name: Ensure frontend exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="festus-${CIRCLE_WORKFLOW_ID:0:7}-bucket" \
            --tags project=udapeople
      - run:
          name: generate instance IP
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filter 'Name=tag:project,Values=udapeople' \
            --output text \
            >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - inventory.txt
      - run: cat .circleci/ansible/inventory.txt

  configure-infrastructure:
    executor: ansible-exec-env
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip
      - attach_workspace:
          at: .circleci/ansible
      - add_ssh_keys:
          fingerprints: ["51:79:28:c0:b3:23:41:46:12:e1:39:d8:d9:22:ab:de"]
      - run:
          name: Install Ansible
          command: |
            apk add ansible
      - run:
          name: Run ansible playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

workflows:
  default:
    jobs:
      - build-frontend
      - test-frontend:
          requires:
            - build-frontend
      - scan-frontend:
          context: slack-secret
          requires:
            - build-frontend
      - build-backend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infrastructure
      - configure-infrastructure:
          requires:
            - deploy-infrastructure