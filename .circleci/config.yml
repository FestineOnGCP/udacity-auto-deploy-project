version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-env-on-fail:
    description: this will destroy the backend when there the smoke test fails
    steps:
      - run:
          name: destroy backend
          command: |
            aws cloudformation delete-stack \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
      - run:
          name: Empty bucket
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
          when: on_fail
      - run:
          name: destroy frontend
          command: |
            aws cloudformation delete-stack \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail

  install-aws-cli:
    description: this is for modularity of the aws-cli installation
    steps:
      - run:
          name: Install aws-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  revert-migration:
    description: revert the migration of the backend
    steps:
      - restore-backend-cache
      - run:
          name: revert migration
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/4x2jEqsqyfywJ2obnErpaW/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migrations:revert
                curl --insecure https://kvdb.io/4x2jEqsqyfywJ2obnErpaW/migration_${CIRCLE_WORKFLOW_ID:0:7} -XDELETE
            fi  
          when: on_fail

  restore-frontend-cache:
    description: For cache modularity
    steps:
      - attach_workspace:
          at: frontend/
  restore-backend-cache:
    description: For cache modularity
    steps:
      - restore_cache:
          keys:
            - backend-modules

executors:
  aws-exec-env:
    docker:
      - image: amazon/aws-cli
  node-exec-env:
    docker:
      - image: circleci/node:13.8.0
  ansible-exec-env:
    docker:
      - image: python:3.7-alpine3.11

jobs:
  build-frontend:
    executor: node-exec-env
    steps:
      - checkout
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - persist_to_workspace:
          root: frontend/
          paths: 
            - node_modules/
  test-frontend:
    executor: node-exec-env
    steps:
      - checkout
      - restore-frontend-cache
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install
            npm run test
  scan-frontend:
    executor: node-exec-env
    steps:
      - checkout
      - restore-frontend-cache
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    executor: node-exec-env
    steps:
      - checkout
      - run:
          name: Build backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: 
            - backend/node_modules
          key: backend-modules
  test-backend:
    executor: node-exec-env
    steps:
      - checkout
      - restore-backend-cache
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test
  scan-backend:
    executor: node-exec-env
    steps:
      - checkout
      - restore-backend-cache
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

workflows:
  default:
    jobs:
      - build-frontend
      - test-frontend:
          requires:
            - build-frontend
      - scan-frontend:
          context: slack-secret
          requires:
            - build-frontend
      - build-backend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires:
            - build-backend
    